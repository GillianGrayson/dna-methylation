path <- "E:/YandexDisk/Work/pydnameth/unn_epic/all_data"
fn = paste(path, "table_part(wo_noIntensity_detP_H17+_negDNAmPhenoAge)",  sep='')
data = read_excel(fn)
library(readxl)
library(xlsx)
data = read_excel(fn)
fn = paste(path, "table_part(wo_noIntensity_detP_H17+_negDNAmPhenoAge).xlsx",  sep='')
data = read_excel(fn)
fn = paste(path, "/table_part(wo_noIntensity_detP_H17+_negDNAmPhenoAge).xlsx",  sep='')
data = read_excel(fn)
features = scan(paste(path, "features_list.txt",  sep=''), character(), quote = "")
features = scan(paste(path, "/features_list.txt",  sep=''), character(), quote = "")
X_All = data[, !(names(data) %in% c("DNAmPhenoAge"))]
X_All = data[, (names(data) %in% features)]
View(X_All)
y_all = data[, target_feature]
target_feature = "DNAmAge"
y_all = data[, target_feature]
X_Control = data[data$Group == "Control", (names(data) %in% features)]
y_All = data[, target_feature]
y_All = data[, target_feature]
y_All = data[data$Group == "Control", target_feature]
y_All = data[, target_feature]
y_Control = data[data$Group == "Control", target_feature]
X_Disease = data[data$Group == "Disease", (names(data) %in% features)]
y_Disease = data[data$Group == "Disease", target_feature]
X_target = X_Control
y_target = y_Control
model = cv.glmnet(X_target, y_target, nfolds=10, nlambda=100, alpha=0.5, family="gaussian")
library(glmnet)
model = cv.glmnet(X_target, y_target, nfolds=10, nlambda=100, alpha=0.5, family="gaussian")
X_target = as.matrix(X_target)
y_target = as.matrix(y_target)
y_target = as.vector(y_target)
model = cv.glmnet(X_target, y_target, nfolds=10, nlambda=100, alpha=0.5, family="gaussian")
lambda_opt = model_ctrl$lambda.min
lambda_opt = model$lambda.min
y_pred = predict(model, X_target, type="response", s=lambda_opt)
rmse(y_target, y_pred)
library(Metrics)
rmse(y_target, y_pred)
y_pred = predict(model, as.matrix(X_All), type="response", s=lambda_opt)
rmse(y_target, y_pred)
rmse(as.vector(y_All), y_pred)
y_pred = predict(model, as.matrix(X_All), type="response", s=lambda_opt)
rmse(as.vector(y_All), y_pred)
y_real = as.vector(y_All)
y_All = data[, target_feature]
y_real = as.array(y_All)
y_real = as.vector(y_All)
View(y_real)
y_target = as.vector(as.matrix(y_target))
)
as.matrix(y_All)
as.matrix(y_All)
y_real = as.matrix(y_All)
y_real = y_All[[target_feature]]
rmse(as.vector(y_All), y_pred)
rmse(y_real, y_pred)
data[paste("Immuno", target_feature, target_part, sep='')] = y_pred
target_part = "DNAmAge"
data[paste("Immuno", target_feature, target_part, sep='')] = y_pred
View(data)
fn_save = paste(path, "/R_table_part(wo_noIntensity_detP_H17+_negDNAmPhenoAge).xlsx",  sep='')
write.xlsx(data, fn_save, sheetName = "Sheet1", col.names = TRUE, row.names = FALSE, append = FALSE)
library(openxlsx)
write.xlsx(data, fn_save, sheetName = "Sheet1", col.names = TRUE, row.names = FALSE, append = FALSE)
target_part = "Control"
write.xlsx(data, fn_save, sheetName = "Sheet1", col.names = TRUE, row.names = FALSE, append = FALSE)
data[paste("Immuno", target_feature, target_part, sep='')] = y_pred
write.xlsx(data, fn_save, sheetName = "Sheet1", col.names = TRUE, row.names = FALSE, append = FALSE)
coeffs_tmp <- coef(model, s = "lambda.min")
coeffs <- data.frame(name = coeffs_tmp@Dimnames[[1]][coeffs_tmp@i + 1], coefficient = coeffs_tmp@x)
View(coeffs)
fn <- paste(path, "/R_clock.xlsx",  sep='')
write.xlsx(coeffs, fn, sheetName = "Sheet1",col.names = TRUE, row.names = FALSE, append = FALSE)
rsq <- function(x, y) summary(lm(y_real~y_pred))$r.squared
R2 <- rsq(y_real, y_pred)
rsq <- function(x, y) summary(lm(x~y))
R2 <- rsq(y_real, y_pred)
View(R2)
View(model)
View(model)
model[["cvup"]]
model[["lambda"]]
model[["nzero"]]
model[["call"]]
model[["glmnet.fit"]]
R2 <- rsq(y_real, y_pred)
View(R2)
rsq <- function(x, y) summary(lm(x~y))
R2 <- rsq(y_real, y_pred)
View(R2)
rsq <- function(x, y) summary(lm(x~y))$r.squared
R2 <- rsq(y_real, y_pred)
lambda_opt
y_All_pred = predict(model, as.matrix(X_All), type="response", s=lambda_opt)
RMSE_All = rmse(y_All[[target_feature]], y_All_pred)
R2_All = rsq(y_All[[target_feature]], y_All_pred)
y_Control_pred = predict(model, as.matrix(X_Control), type="response", s=lambda_opt)
RMSE_Control = rmse(y_Control[[target_feature]], y_Control_pred)
R2_Control = rsq(y_Control[[target_feature]], y_Control_pred)
y_Disease_pred = predict(model, as.matrix(X_Disease), type="response", s=lambda_opt)
RMSE_Disease = rmse(y_Disease[[target_feature]], y_Disease_pred)
R2_Disease = rsq(y_Disease[[target_feature]], y_Disease_pred)
